import { Platform, Provider } from 'environment-types';

// TODO : Visitorize this entire file!!!

export const getImportLines = (provider: Provider, splashScreen: string) => {
  if (provider === 'perfecto') {
    return `
let perfectoIni = tester.findPerfectoIni();
capabilities.iOS.securityToken = perfectoIni.securityToken;
capabilities.android.securityToken = perfectoIni.securityToken;
capabilities.iOS.deviceName = perfectoIni.deviceName;
capabilities.android.deviceName = perfectoIni.deviceName;
`;
  } else if (provider === 'saucelabs') {
    return `
let sauceLabsIni = tester.findSauceLabsIni();
capabilities.android.deviceOrientation = sauceLabsIni.deviceOrientation;
capabilities.iOS.deviceOrientation = sauceLabsIni.deviceOrientation;
capabilities.android.platformVersion = sauceLabsIni.platformVersion;
capabilities.iOS.platformVersion = sauceLabsIni.platformVersion;
capabilities.android.username = sauceLabsIni.username;
capabilities.iOS.username = sauceLabsIni.username;
capabilities.android.accessKey = sauceLabsIni.accessKey;
capabilities.iOS.accessKey = sauceLabsIni.accessKey;
capabilities.android.deviceName = sauceLabsIni.deviceName;
capabilities.iOS.deviceName = sauceLabsIni.deviceName;
`;
  } else if (provider === 'aws' && splashScreen && splashScreen.length > 0) {
    // iOS has no such concept because we don't assert active view controllers in the generated test script
    return `capabilities.android.appWaitActivity = "${splashScreen}";
`;
  } else {
    return '';
  }
};

export const getTitleLines = (platform: Platform) => {
  let titleIOS = `(sessionData.appName + " - iOS Test generated by TestFairy\\n").magenta`;
  let titleAndroid = `(sessionData.appName + " - Android Test generated by TestFairy\\n").magenta`;
  let title = platform === 'ios' ? titleIOS : titleAndroid;

  return title;
};

export const getDeviceLines = (platform: Platform) => {
  let deviceIOS = `let desired = _.clone(capabilities.iOS);
    desired.app = __dirname + "/session/app.zip";`;
  let deviceAndroid = `let desired = _.clone(capabilities.android);
    desired.app = __dirname + "/session/app.apk";`;
  let device = platform === 'ios' ? deviceIOS : deviceAndroid;
  device += `
    desired.appPackage = sessionData.packageName;`;

  return device;
};

export const getDriverLines = (provider: Provider) => {
  // provider == AWS or Local
  let driverSetup = `driver = wd.promiseChainRemote(serverConfig);`;

  if (provider === 'perfecto') {
    driverSetup = `
    desired.app = await tester.uploadAppToPerfecto(
      serverConfig.host,
      perfectoIni.securityToken,
      desired.app
    );
    desired = tester.filterPerfectoCaps(desired);
    driver = wd.promiseChainRemote(serverConfig.driverEndpoint);`;
  } else if (provider === 'saucelabs') {
    driverSetup = `
    desired.app = await tester.uploadAppToSauceLabs(
      sauceLabsIni.username,
      sauceLabsIni.accessKey,
      sauceLabsIni.region,
      desired.app
    );

    driver = wd.promiseChainRemote(serverConfig.driverEndpoint);`;
  }

  return driverSetup;
};

export const getDriverInitLines = (provider: Provider) => {
  if (provider === 'perfecto') {
    return `    return new Promise(function(resolve) {
      driver.init(
        desired,
        tester.buildOnPerfectoInit(
          serverConfig.host, perfectoIni.securityToken, desired.deviceName, function() {
            resolve();
          })
        ).setImplicitWaitTimeout(5000);
    });
    `;
  } else {
    return 'return driver.init(desired).setImplicitWaitTimeout(5000);';
  }
};
