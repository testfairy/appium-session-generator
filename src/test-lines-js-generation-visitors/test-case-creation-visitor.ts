import { TestLinesAppenderVisitor } from 'test-lines/test-lines-visitor';
import { Provider, Platform } from 'test-lines/environment';

export class TestCaseCreationVisitor extends TestLinesAppenderVisitor {
  visitInitialDocs(sessionUrl: string) {
    let generatedJsLine = `
"use strict";

////////////////////////////////////////////////////////////////////////////////////
// TestFairy : This is an automatically generated test case for a TestFairy session.
//
// You can inspect the session here:
//   ${sessionUrl}
//
////////////////////////////////////////////////////////////////////////////////////

`;
    this.append(generatedJsLine);

    super.visitInitialDocs(sessionUrl);
  }

  visitImports(provider: Provider, sessionUrl: string) {
    let generatedJsLine = `
// Helpers (app agnostic)
var tester = require("./helpers/setup");
var serverConfig = require('./helpers/appium-server').${provider};
var interactions = require("./helpers/testfairy-interactions");
var wd = require("wd");
var _ = require('underscore');
var colors = require('colors');
var capabilities = require("./helpers/caps");

// Session data (app specific)
var sessionData = require('./session/sessionData.json');
sessionData.sessionUrl = '${sessionUrl}';
`;
    if (provider === 'perfecto') {
      generatedJsLine += `
capabilities.iOSSimulator.securityToken = tester.findPerfectoSecurityToken();
capabilities.androidEmulator.securityToken = tester.findPerfectoSecurityToken();

`;
    }

    this.append(generatedJsLine);

    super.visitImports(provider, sessionUrl);
  }

  visitTestBegin(platform: Platform, provider: Provider) {
    let titleIOS = `(sessionData.appName + " - iOS Test generated by TestFairy\\n").magenta`;
    let titleAndroid = `(sessionData.appName + " - Android Test generated by TestFairy\\n").magenta`;
    let title = platform === 'ios' ? titleIOS : titleAndroid;

    let deviceIOS = `var desired = _.clone(capabilities.iOSSimulator);
    desired.app = __dirname + "/session/app.zip";`;
    let deviceAndroid = `var desired = _.clone(capabilities.androidEmulator);
    desired.app = __dirname + "/session/app.apk";`;
    let device = platform === 'ios' ? deviceIOS : deviceAndroid;

    let perfectoUpload = '//-------------';
    if (provider === 'perfecto') {
      perfectoUpload = `desired.app = await tester.uploadAppToPerfecto(serverConfig.host, desired.securityToken, desired.app);`;
    }

    let generatedJsLine = `
// App test suite
describe(
  ${title},
  async function () {
  this.timeout(60 * 60 * 1000); // 1 hour

  var driver;

  before(function () {
    driver = wd.promiseChainRemote(serverConfig);
    require("./helpers/logging").configure(driver);

    ${device}
    ${perfectoUpload}

    interactions.packageName = sessionData.packageName;
    interactions.driver = driver;

    return driver.init(desired).setImplicitWaitTimeout(5000);
  });

  after(function () {
    return driver.quit();
  });

  it("should simulate a session like ".magenta + sessionData.sessionUrl.magenta.underline, async function () {
`;
    this.append(generatedJsLine);

    super.visitTestBegin(platform, provider);
  }

  visitTestLimits(isComplete: boolean) {
    if (isComplete) {
      let generatedJsLine = `    console.log("\\nTF : Tests exceed supported length, trailing actions will be truncated\\n".red.underline);`;

      this.append(generatedJsLine);
    }

    super.visitTestLimits(isComplete);
  }

  visitAppLaunch(initialDelay: number) {
    let generatedJsLine = `
    // TF : TestFairy.begin(), time: 00:00
    console.log("\\nTF : TestFairy.begin(), time: 00:00\\n".magenta.underline);
    await interactions.begin(${initialDelay}); // EDITME : Set up an initial delay, in milis
`;
    this.append(generatedJsLine);

    super.visitAppLaunch(initialDelay);
  }

  visitTestEnd() {
    let generatedJsLine = `

    return tester.assert.isFulfilled(driver.sleep(5000));
  });
});
`;
    this.append(generatedJsLine);

    super.visitTestEnd();
  }
}
