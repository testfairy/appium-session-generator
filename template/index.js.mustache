"use strict";

////////////////////////////////////////////////////////////////////////////////////
// TestFairy : This is an automatically generated test case for a TestFairy session.
////////////////////////////////////////////////////////////////////////////////////

// Helpers (app agnostic)
var tester = require("./helpers/setup");
var serverConfig = require('./helpers/appium-server').local;
var interactions = require("./helpers/interactions");
var wd = require("wd");
var _ = require('underscore');
var colors = require('colors');

// Session data (app specific)
var sessionData = require('./session/sessionData.json');
sessionData.sessionUrl = '{{{ sessionUrl }}}';

// App test suite
describe((sessionData.appName + " - Android Test generated by TestFairy\n").magenta, function () {
  this.timeout(60 * 60 * 1000); // 1 hour

  var driver;

  before(function () {
    driver = wd.promiseChainRemote(serverConfig);
    require("./helpers/logging").configure(driver);

    var desired = _.clone(require("./helpers/caps").androidEmulator);
    desired.app = __dirname + "/session/app.apk";

    interactions.packageName = sessionData.packageName;
    interactions.driver = driver;

    return driver
      .init(desired)
      .setImplicitWaitTimeout(5000);
  });

  after(function () {
    return driver
      .quit();
  });

  it("should simulate a session like ".magenta + sessionData.sessionUrl.magenta.underline, function () {
  {{#incomplete}}
    console.log("\nTF : Tests exceed supported length, trailing actions will be truncated\n".red.underline);
  {{/incomplete}}

    // TF : TestFairy.begin(), time: 00:00
    console.log("\nTF : TestFairy.begin(), time: 00:00\n".magenta.underline);
    var result = interactions.begin({{{ initialDelay }}}); // EDITME : Set up an initial delay, in milis

  {{#testLines}}
  {{! ---------------------------------- }}
    {{#input}}
      {{#touchDown}}
    // TF : Touched down ({{{x}}}, {{{y}}}), time: {{{timeString}}}
    result = result.then(function() { console.log("\nTF : Touched down ({{{x}}}, {{{y}}}), time: {{{timeString}}}\n".magenta.underline); })
    result = interactions.touchDown(result, {{{x}}}, {{{y}}}).sleep({{{sleep}}});
      {{/touchDown}}
      {{#touchMove}}
    result = interactions.touchMove(result, {{{x}}}, {{{y}}}).sleep({{{sleep}}});
      {{/touchMove}}
      {{#touchUp}}
    result = interactions.touchUp(result, {{{x}}}, {{{y}}}).sleep({{{sleep}}});
      {{/touchUp}}
      {{#backButton}}
    // TF : Pressed back, time: {{{timeString}}}
    result = result.then(function() { console.log("\nTF : Pressed back, time: {{{timeString}}}\n".magenta.underline); });
    result = interactions.back(result).sleep({{{sleep}}});
      {{/backButton}}
    {{/input}}
{{! ---------------------------------- }}
    {{#checkpoint}}
    // TF : {{{name}}}, time: {{{timeString}}}
    result = result.then(function() { console.log("\nTF : {{{name}}}, time: {{{timeString}}}\n".magenta.underline); });
    {{/checkpoint}}
{{! ---------------------------------- }}
    {{#userInteraction}}
      {{^viewId}}
        {{#accessibilityClassName}}
          {{#swipe}}
    // TF : Swiped {{{label}}}, time: {{{timeString}}}
    result = result.then(function() { console.log("\nTF : Swiped {{{label}}}, time: {{{timeString}}}\n".magenta.underline); });
          {{/swipe}}
          {{#buttonPressed}}
    // TF : Clicked {{{label}}}, time: {{{timeString}}}
    result = result.then(function() { console.log("\nTF : Clicked {{{label}}}, time: {{{timeString}}}\n".magenta.underline); });
          {{/buttonPressed}}
          {{#buttonLongPressed}}
    // TF : Long pressed {{{label}}}, time: {{{timeString}}}
    result = result.then(function() { console.log("\nTF : Long pressed {{{label}}}, time: {{{timeString}}}\n".magenta.underline); });
          {{/buttonLongPressed}}
          {{#buttonDoublePressed}}
    // TF : Double pressed {{{label}}}, time: {{{timeString}}}
    result = result.then(function() { console.log("\nTF : Double pressed {{{label}}}, time: {{{timeString}}}\n".magenta.underline); });
          {{/buttonDoublePressed}}
    result = interactions.findTextInView(result, '{{{label}}}', '{{{className}}}')
        {{/accessibilityClassName}}
      {{/viewId}}
{{!   -------------------- }}
      {{#viewId}}
        {{#swipe}}
    // TF : Swiped id/{{{viewId}}}, time: {{{timeString}}}
    result = result.then(function() { console.log("\nTF : Swiped id/{{{viewId}}}, time: {{{timeString}}}\n".magenta.underline); });
        {{/swipe}}
        {{#buttonPressed}}
    // TF : Clicked id/{{{viewId}}}, time: {{{timeString}}}
    result = result.then(function() { console.log("\nTF : Clicked id/{{{viewId}}}, time: {{{timeString}}}\n".magenta.underline); });
        {{/buttonPressed}}
        {{#buttonLongPressed}}
    // TF : Long pressed id/{{{viewId}}}, time: {{{timeString}}}
    result = result.then(function() { console.log("\nTF : Long pressed id/{{{viewId}}}, time: {{{timeString}}}\n".magenta.underline); });
        {{/buttonLongPressed}}
        {{#buttonDoublePressed}}
    // TF : Double pressed id/{{{viewId}}}, time: {{{timeString}}}
    result = result.then(function() { console.log("\nTF : Double pressed id/{{{viewId}}}, time: {{{timeString}}}\n".magenta.underline); });
        {{/buttonDoublePressed}}
    result = interactions.findViewById(result, '{{{viewId}}}', '{{{label}}}', '{{{className}}}');
        {{#isEditTextFocusGain}}
    result = interactions.insertText(result, '{{{viewId}}}', 'EDITME'); // EDITME : Edit the string on the left or remove line if not relevant
        {{/isEditTextFocusGain}}
      {{/viewId}}
    {{/userInteraction}}
{{! ---------------------------------- }}
    {{#foregroundActivity}}
    // TF : In {{{name}}}, time: {{{timeString}}}
    result = result.then(function() { console.log("\nTF : In {{{name}}}, time: {{{timeString}}}\n".magenta.underline); });
      {{#isLastActionBackButton}}
    result = interactions.waitActivity(result, '{{{name}}}', true);
      {{/isLastActionBackButton}}
      {{^isLastActionBackButton}}
    result = interactions.waitActivity(result, '{{{name}}}', false);
      {{/isLastActionBackButton}}
    {{/foregroundActivity}}

{{! Empty line for easy readability }}
  {{/testLines}}

    return tester.assert.isFulfilled(result.sleep(5000));
  });
});
