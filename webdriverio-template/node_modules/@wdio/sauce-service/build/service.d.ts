/// <reference types="webdriver" />
/// <reference types="webdriverio/webdriverio-core" />
/// <reference types="@wdio/mocha-framework" />
/// <reference types="@wdio/jasmine-framework" />
/// <reference types="@wdio/cucumber-framework" />
/// <reference types="webdriverio" />
import { Job } from 'saucelabs';
import { SauceServiceConfig } from './types';
export default class SauceService implements WebdriverIO.ServiceInstance {
    private _options;
    private _capabilities;
    private _config;
    private _testCnt;
    private _failures;
    private _isServiceEnabled;
    private _isJobNameSet;
    private _api;
    private _isRDC;
    private _browser?;
    private _isUP?;
    private _suiteTitle?;
    constructor(_options: SauceServiceConfig, _capabilities: WebDriver.Capabilities | WebDriver.DesiredCapabilities, _config: WebdriverIO.Config);
    beforeSession(): void;
    before(caps: WebDriver.Capabilities, specs: string[], browser: WebdriverIO.BrowserObject | WebdriverIO.MultiRemoteBrowserObject): void;
    beforeSuite(suite: any): void;
    beforeTest(test: any): void;
    afterSuite(suite: any): void;
    afterTest(test: any, context: any, results: any): void;
    beforeFeature(uri: any, feature: any): void;
    beforeScenario(uri: any, feature: any, scenario: any): void;
    afterScenario(uri: any, feature: any, pickle: any, result: any): void;
    after(result: any): Promise<unknown> | undefined;
    onReload(oldSessionId: string, newSessionId: string): Promise<void> | undefined;
    updateJob(sessionId: string, failures: number, calledOnReload?: boolean, browserName?: string): Promise<void>;
    getBody(failures: number, calledOnReload?: boolean, browserName?: string): Partial<Job>;
    updateUP(failures: number): Promise<unknown> | undefined;
}
//# sourceMappingURL=service.d.ts.map