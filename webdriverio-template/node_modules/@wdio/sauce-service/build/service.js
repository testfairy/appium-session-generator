"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const saucelabs_1 = __importDefault(require("saucelabs"));
const logger_1 = __importDefault(require("@wdio/logger"));
const utils_1 = require("./utils");
const jobDataProperties = ['name', 'tags', 'public', 'build', 'custom-data'];
const log = logger_1.default('@wdio/sauce-service');
class SauceService {
    constructor(_options, _capabilities, _config) {
        this._options = _options;
        this._capabilities = _capabilities;
        this._config = _config;
        this._testCnt = 0;
        this._failures = 0;
        this._isServiceEnabled = true;
        this._isJobNameSet = false;
        this._api = new saucelabs_1.default(this._config);
        this._isRDC = 'testobject_api_key' in this._capabilities;
    }
    beforeSession() {
        if (!this._isRDC && !this._config.user) {
            this._isServiceEnabled = false;
            this._config.user = 'unknown_user';
        }
        if (!this._isRDC && !this._config.key) {
            this._isServiceEnabled = false;
            this._config.key = 'unknown_key';
        }
    }
    before(caps, specs, browser) {
        this._browser = browser;
        const capabilities = this._browser.requestedCapabilities || {};
        this._isUP = utils_1.isUnifiedPlatform(capabilities);
    }
    beforeSuite(suite) {
        this._suiteTitle = suite.title;
    }
    beforeTest(test) {
        if (!this._isServiceEnabled || this._isRDC || this._isUP || !this._browser) {
            return;
        }
        if (this._suiteTitle === 'Jasmine__TopLevel__Suite') {
            this._suiteTitle = test.fullName.slice(0, test.fullName.indexOf(test.description) - 1);
        }
        if (this._browser && !this._isUP && !this._isJobNameSet) {
            this._browser.execute('sauce:job-name=' + this._suiteTitle);
            this._isJobNameSet = true;
        }
        const fullTitle = (test.fullName ||
            `${test.parent} - ${test.title}`);
        this._browser.execute('sauce:context=' + fullTitle);
    }
    afterSuite(suite) {
        if (Object.prototype.hasOwnProperty.call(suite, 'error')) {
            ++this._failures;
        }
    }
    afterTest(test, context, results) {
        if (test._retriedTest && results.passed) {
            --this._failures;
            return;
        }
        if (test._retriedTest && !results.passed && test._currentRetry < test._retries) {
            return;
        }
        if (!results.passed) {
            ++this._failures;
        }
    }
    beforeFeature(uri, feature) {
        if (!this._isServiceEnabled || this._isRDC || this._isUP || !this._browser) {
            return;
        }
        this._suiteTitle = feature.document.feature.name;
        this._browser.execute('sauce:context=Feature: ' + this._suiteTitle);
    }
    beforeScenario(uri, feature, scenario) {
        if (!this._isServiceEnabled || this._isRDC || this._isUP || !this._browser) {
            return;
        }
        const scenarioName = scenario.name;
        this._browser.execute('sauce:context=Scenario: ' + scenarioName);
    }
    afterScenario(uri, feature, pickle, result) {
        if (result.status === 'failed') {
            ++this._failures;
        }
    }
    after(result) {
        if (!this._browser || (!this._isServiceEnabled && !this._isRDC)) {
            return;
        }
        let failures = this._failures;
        if (this._browser.config.mochaOpts && this._browser.config.mochaOpts.bail && Boolean(result)) {
            failures = 1;
        }
        const status = 'status: ' + (failures > 0 ? 'failing' : 'passing');
        if (!this._browser.isMultiremote) {
            log.info(`Update job with sessionId ${this._browser.sessionId}, ${status}`);
            return this._isUP ? this.updateUP(failures) : this.updateJob(this._browser.sessionId, failures);
        }
        const mulitremoteBrowser = this._browser;
        return Promise.all(Object.keys(this._capabilities).map((browserName) => {
            log.info(`Update multiremote job for browser "${browserName}" and sessionId ${mulitremoteBrowser[browserName].sessionId}, ${status}`);
            return this._isUP ? this.updateUP(failures) : this.updateJob(mulitremoteBrowser[browserName].sessionId, failures, false, browserName);
        }));
    }
    onReload(oldSessionId, newSessionId) {
        if (!this._browser || (!this._isServiceEnabled && !this._isRDC)) {
            return;
        }
        const status = 'status: ' + (this._failures > 0 ? 'failing' : 'passing');
        if (!this._browser.isMultiremote) {
            log.info(`Update (reloaded) job with sessionId ${oldSessionId}, ${status}`);
            return this.updateJob(oldSessionId, this._failures, true);
        }
        const mulitremoteBrowser = this._browser;
        const browserName = mulitremoteBrowser.instances.filter((browserName) => mulitremoteBrowser[browserName].sessionId === newSessionId)[0];
        log.info(`Update (reloaded) multiremote job for browser "${browserName}" and sessionId ${oldSessionId}, ${status}`);
        return this.updateJob(oldSessionId, this._failures, true, browserName);
    }
    async updateJob(sessionId, failures, calledOnReload = false, browserName) {
        if (this._isRDC) {
            await this._api.updateTest(sessionId, { passed: failures === 0 });
            this._failures = 0;
            return;
        }
        const body = this.getBody(failures, calledOnReload, browserName);
        await this._api.updateJob(this._config.user, sessionId, body);
        this._failures = 0;
    }
    getBody(failures, calledOnReload = false, browserName) {
        let body = {};
        if (calledOnReload || this._testCnt) {
            body.name = this._suiteTitle;
            if (browserName) {
                body.name = `${browserName}: ${body.name}`;
            }
            let testCnt = ++this._testCnt;
            const mulitremoteBrowser = this._browser;
            if (this._browser && this._browser.isMultiremote) {
                testCnt = Math.ceil(testCnt / mulitremoteBrowser.instances.length);
            }
            body.name += ` (${testCnt})`;
        }
        let caps = this._capabilities['sauce:options'] || this._capabilities;
        for (let prop of jobDataProperties) {
            if (!caps[prop]) {
                continue;
            }
            body[prop] = caps[prop];
        }
        body.passed = failures === 0;
        return body;
    }
    updateUP(failures) {
        if (!this._browser) {
            return;
        }
        return this._browser.execute(`sauce:job-result=${failures === 0}`);
    }
}
exports.default = SauceService;
