"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeCapabilityFactory = exports.isEmuSim = exports.isUnifiedPlatform = void 0;
const utils_1 = require("@wdio/utils");
function isUnifiedPlatform(caps) {
    const { 'appium:deviceName': appiumDeviceName = '', deviceName = '', platformName = '' } = caps;
    const name = appiumDeviceName || deviceName;
    return !name.match(/(simulator)|(emulator)/gi) && !!platformName.match(/(ios)|(android)/gi);
}
exports.isUnifiedPlatform = isUnifiedPlatform;
function isEmuSim(caps) {
    const { 'appium:deviceName': appiumDeviceName = '', deviceName = '', platformName = '' } = caps;
    const name = appiumDeviceName || deviceName;
    return !!name.match(/(simulator)|(emulator)/gi) && !!platformName.match(/(ios)|(android)/gi);
}
exports.isEmuSim = isEmuSim;
function makeCapabilityFactory(tunnelIdentifier, options) {
    return (capability) => {
        const isLegacy = Boolean((capability.platform || capability.version) &&
            !utils_1.isW3C(capability) &&
            !capability['sauce:options']);
        if (!capability['sauce:options'] && !isLegacy && !isUnifiedPlatform(capability) && !isEmuSim(capability)) {
            capability['sauce:options'] = {};
        }
        Object.assign(capability, options);
        const sauceOptions = (!isLegacy && !isUnifiedPlatform(capability) && !isEmuSim(capability) ? capability['sauce:options'] : capability);
        sauceOptions.tunnelIdentifier = (capability.tunnelIdentifier ||
            sauceOptions.tunnelIdentifier ||
            tunnelIdentifier);
        if (!isLegacy && !isUnifiedPlatform(capability) && !isEmuSim(capability)) {
            delete capability.tunnelIdentifier;
        }
    };
}
exports.makeCapabilityFactory = makeCapabilityFactory;
