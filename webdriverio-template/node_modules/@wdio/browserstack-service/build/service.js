"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = __importDefault(require("@wdio/logger"));
const got_1 = __importDefault(require("got"));
const util_1 = require("./util");
const log = logger_1.default('@wdio/browserstack-service');
class BrowserstackService {
    constructor(_options = {}, _caps, _config) {
        this._options = _options;
        this._caps = _caps;
        this._config = _config;
        this._sessionBaseUrl = 'https://api.browserstack.com/automate/sessions';
        this._failReasons = [];
        this._scenariosThatRan = [];
        this._failureStatuses = ['failed', 'ambiguous', 'undefined', 'unknown'];
        const strict = Boolean(_config.cucumberOpts && _config.cucumberOpts.strict);
        if (strict) {
            this._failureStatuses.push('pending');
        }
    }
    beforeSession(config) {
        if (!config.user) {
            config.user = 'NotSetUser';
        }
        if (!config.key) {
            config.key = 'NotSetKey';
        }
        this._config.user = config.user;
        this._config.key = config.key;
    }
    before(caps, specs, browser) {
        this._browser = browser;
        const capabilities = this._browser.capabilities || {};
        if (capabilities.app || this._caps.app) {
            this._sessionBaseUrl = 'https://api-cloud.browserstack.com/app-automate/sessions';
        }
        this._scenariosThatRan = [];
        return this._printSessionURL();
    }
    beforeSuite(suite) {
        this._fullTitle = suite.title;
        return this._updateJob({ name: this._fullTitle });
    }
    beforeFeature(uri, feature) {
        this._fullTitle = feature.document.feature.name;
        return this._updateJob({ name: this._fullTitle });
    }
    afterTest(test, context, results) {
        const { error, passed } = results;
        this._fullTitle = (test.fullName ||
            `${test.parent} - ${test.title}`);
        if (!passed) {
            this._failReasons.push((error && error.message) || 'Unknown Error');
        }
    }
    after(result) {
        if (this._options.preferScenarioName && this._scenariosThatRan.length === 1) {
            this._fullTitle = this._scenariosThatRan.pop();
        }
        const hasReasons = Boolean(this._failReasons.filter(Boolean).length);
        return this._updateJob({
            status: result === 0 ? 'passed' : 'failed',
            name: this._fullTitle,
            reason: hasReasons ? this._failReasons.join('\n') : undefined
        });
    }
    afterScenario(uri, feature, pickle, results) {
        let { exception, status } = results;
        if (status !== 'skipped') {
            this._scenariosThatRan.push(pickle.name);
        }
        if (this._failureStatuses.includes(status)) {
            exception = exception || (status === 'pending'
                ? `Some steps/hooks are pending for scenario "${pickle.name}"`
                : 'Unknown Error');
            this._failReasons.push(exception);
        }
    }
    async onReload(oldSessionId, newSessionId) {
        if (!this._browser) {
            return Promise.resolve();
        }
        const hasReasons = Boolean(this._failReasons.filter(Boolean).length);
        let status = hasReasons ? 'failed' : 'passed';
        if (!this._browser.isMultiremote) {
            log.info(`Update (reloaded) job with sessionId ${oldSessionId}, ${status}`);
        }
        else {
            const browserName = this._browser.instances.filter((browserName) => this._browser && this._browser[browserName].sessionId === newSessionId)[0];
            log.info(`Update (reloaded) multiremote job for browser "${browserName}" and sessionId ${oldSessionId}, ${status}`);
        }
        await this._update(oldSessionId, {
            name: this._fullTitle,
            status,
            reason: hasReasons ? this._failReasons.join('\n') : undefined
        });
        this._scenariosThatRan = [];
        delete this._fullTitle;
        this._failReasons = [];
        await this._printSessionURL();
    }
    _updateJob(requestBody) {
        return this._multiRemoteAction((sessionId, browserName) => {
            log.info(browserName
                ? `Update multiremote job for browser "${browserName}" and sessionId ${sessionId}`
                : `Update job with sessionId ${sessionId}`);
            return this._update(sessionId, requestBody);
        });
    }
    _multiRemoteAction(action) {
        const { _browser } = this;
        if (!_browser) {
            return Promise.resolve();
        }
        if (!_browser.isMultiremote) {
            return action(_browser.sessionId);
        }
        return Promise.all(_browser.instances
            .filter(browserName => {
            const cap = util_1.getBrowserCapabilities(_browser, this._caps, browserName);
            return util_1.isBrowserstackCapability(cap);
        })
            .map((browserName) => (action(_browser[browserName].sessionId, browserName))));
    }
    _update(sessionId, requestBody) {
        const sessionUrl = `${this._sessionBaseUrl}/${sessionId}.json`;
        log.debug(`Updating Browserstack session at ${sessionUrl} with request body: `, requestBody);
        return got_1.default.put(sessionUrl, {
            json: requestBody,
            username: this._config.user,
            password: this._config.key
        });
    }
    async _printSessionURL() {
        if (!this._browser) {
            return Promise.resolve();
        }
        await this._multiRemoteAction(async (sessionId, browserName) => {
            const sessionUrl = `${this._sessionBaseUrl}/${sessionId}.json`;
            log.debug(`Requesting Browserstack session URL at ${sessionUrl}`);
            const response = await got_1.default(sessionUrl, {
                username: this._config.user,
                password: this._config.key,
                responseType: 'json'
            });
            const capabilities = this._browser && util_1.getBrowserCapabilities(this._browser, this._caps, browserName);
            const browserString = util_1.getBrowserDescription(capabilities);
            log.info(`${browserString} session: ${response.body.automation_session.browser_url}`);
        });
    }
}
exports.default = BrowserstackService;
