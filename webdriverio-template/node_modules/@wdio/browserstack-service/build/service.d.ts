/// <reference types="./" />
/// <reference types="webdriverio/webdriverio-core" />
import { Browser, Capabilities, Context, Feature, MultiRemoteAction, Pickle } from './types';
export default class BrowserstackService implements WebdriverIO.ServiceInstance {
    private _options;
    private _caps;
    private _config;
    private _sessionBaseUrl;
    private _failReasons;
    private _scenariosThatRan;
    private _failureStatuses;
    private _browser?;
    private _fullTitle?;
    constructor(_options: BrowserstackConfig, _caps: Capabilities, _config: WebdriverIO.Config);
    beforeSession(config: WebdriverIO.Config): void;
    before(caps: Capabilities, specs: string[], browser: Browser): Promise<void>;
    beforeSuite(suite: WebdriverIO.Suite): Promise<void> | import("got/dist/source").CancelableRequest<unknown> | import("got/dist/source/core").default | Promise<unknown[]>;
    beforeFeature(uri: string, feature: Feature): Promise<void> | import("got/dist/source").CancelableRequest<unknown> | import("got/dist/source/core").default | Promise<unknown[]>;
    afterTest(test: WebdriverIO.Test, context: Context, results: WebdriverIO.TestResult): void;
    after(result: number): Promise<void> | import("got/dist/source").CancelableRequest<unknown> | import("got/dist/source/core").default | Promise<unknown[]>;
    afterScenario(uri: string, feature: Feature, pickle: Pickle, results: WebdriverIO.TestResult): void;
    onReload(oldSessionId: string, newSessionId: string): Promise<void>;
    _updateJob(requestBody: any): Promise<void> | import("got/dist/source").CancelableRequest<unknown> | import("got/dist/source/core").default | Promise<unknown[]>;
    _multiRemoteAction(action: MultiRemoteAction): Promise<void> | import("got/dist/source").CancelableRequest<unknown> | import("got/dist/source/core").default | Promise<unknown[]>;
    _update(sessionId: string, requestBody: any): import("got/dist/source").CancelableRequest<import("got/dist/source").Response<string>>;
    _printSessionURL(): Promise<void>;
}
//# sourceMappingURL=service.d.ts.map