"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const perf_hooks_1 = require("perf_hooks");
const browserstack_local_1 = __importDefault(require("browserstack-local"));
const logger_1 = __importDefault(require("@wdio/logger"));
const log = logger_1.default('@wdio/browserstack-service');
class BrowserstackLauncherService {
    constructor(options, capabilities, config) {
        this.options = options;
        this.config = config;
    }
    onPrepare(config, capabilities) {
        if (!this.options.browserstackLocal) {
            return log.info('browserstackLocal is not enabled - skipping...');
        }
        const opts = {
            key: this.config.key,
            forcelocal: true,
            onlyAutomate: true,
            ...this.options.opts
        };
        this.browserstackLocal = new browserstack_local_1.default.Local();
        if (Array.isArray(capabilities)) {
            capabilities.forEach(capability => {
                capability['browserstack.local'] = true;
            });
        }
        else if (typeof capabilities === 'object') {
            capabilities['browserstack.local'] = true;
        }
        else {
            throw TypeError('Capabilities should be an object or Array!');
        }
        const obs = new perf_hooks_1.PerformanceObserver((list) => {
            const entry = list.getEntries()[0];
            log.info(`Browserstack Local successfully started after ${entry.duration}ms`);
        });
        obs.observe({ entryTypes: ['measure'], buffered: false });
        let timer;
        perf_hooks_1.performance.mark('tbTunnelStart');
        return Promise.race([
            util_1.promisify(this.browserstackLocal.start.bind(this.browserstackLocal))(opts),
            new Promise((resolve, reject) => {
                timer = setTimeout(function () {
                    reject('Browserstack Local failed to start within 60 seconds!');
                }, 60000);
            })
        ]).then(function (result) {
            clearTimeout(timer);
            perf_hooks_1.performance.mark('tbTunnelEnd');
            perf_hooks_1.performance.measure('bootTime', 'tbTunnelStart', 'tbTunnelEnd');
            return Promise.resolve(result);
        }, function (err) {
            clearTimeout(timer);
            return Promise.reject(err);
        });
    }
    onComplete() {
        if (!this.browserstackLocal || !this.browserstackLocal.isRunning()) {
            return;
        }
        if (this.options.forcedStop) {
            return process.kill(this.browserstackLocal.pid);
        }
        let timer;
        return Promise.race([
            new Promise((resolve, reject) => {
                var _a;
                (_a = this.browserstackLocal) === null || _a === void 0 ? void 0 : _a.stop((err) => {
                    if (err) {
                        return reject(err);
                    }
                    resolve();
                });
            }),
            new Promise((resolve, reject) => {
                timer = setTimeout(() => reject(new Error('Browserstack Local failed to stop within 60 seconds!')), 60000);
            })
        ]).then(function (result) {
            clearTimeout(timer);
            return Promise.resolve(result);
        }, function (err) {
            clearTimeout(timer);
            return Promise.reject(err);
        });
    }
}
exports.default = BrowserstackLauncherService;
